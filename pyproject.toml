####################
# Project Metadata #
####################

[project]
authors = [{ name = "Henrik Holm", email = "no-reply@email.com" }]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []
description = "Python template project using the Hatch project manager."
dynamic = ["version"]
license = { file = "LICENSE" }
name = "python-project"
readme = "README.md"
requires-python = ">=3.13"

[project.urls]
Documentation = "https://github.com/h-holm/python-project"
Source = "https://github.com/h-holm/python-project"

#########
# Hatch #
#########

[tool.hatch]
metadata.allow-direct-references = true

[tool.hatch.env]
requires = ["hatch-pip-compile~=1.11.3"]

[tool.hatch.version]
path = "src/python_project/__version__.py"
raw-options = { version_scheme = "no-guess-dev" }

##################
# External Tools #
##################

[tool.coverage.paths]
source = ["src/python_project"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if __name__ == .__main__.:"]
skip_empty = true

[tool.coverage.run]
branch = true
omit = ["src/python_project/__version__.py", "tests/*"]
relative_files = true
source = ["src/python_project"]

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_unimported = true
files = ["src/python_project", "tests"]
# Set to "silent" to not follow.
follow_imports = "normal"
no_implicit_optional = true
plugins = ["pydantic.mypy"]
pretty = true
show_column_numbers = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "--cov=src/python_project --cov-report=term-missing --doctest-glob='*.md'"
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
minversion = "8.3.3"
pythonpath = ["src"]
testpaths = ["tests"]

[tool.ruff]
exclude = ["src/python_project/__version__.py"]
indent-width = 4
line-length = 120
target-version = "py313"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "COM812",  # "May cause conflicts when used with the formatter".
  "CPY001",  # Requires copyright notices at the top of files.
  "D203",    # If enabled, this requires one blank line before Class docstrings. Conflicts with D211.
  "D213",    # Conflicts with D212.
  "ISC001",  # Causes unexpected behaviour with formatter.
  "G004",    # Disallows f-strings in logging statements.
  "PLC1901", # Disallows comparing to the empty string ("").
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["python_project"]
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*" = [
  # Tests can use magic values, assertions, and relative imports.
  "PLR2004",
  "S101",
  "TID252",
  # Tests can skip docstrings.
  "D100",
  "D103",
  # Allow boolean-typed positional arguments in test function definitions.
  "FBT001",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

######################
# Hatch Environments #
######################

# "Base" env to ensure the same Python version is used across all Hatch envs. Note that this env is not supposed to be
# used directly, but rather as a template for other envs.
[tool.hatch.envs.base]
python = "3.13"
# Skip (local) installation of the project itself. This assumes the project is not supposed to be packaged as a Python
# egg or similar.
skip-install = true
template = "base"

[tool.hatch.envs.base.scripts]
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE_PACKAGE='{args}' hatch env run --env {env_name} -- python --version"

#######################
# Default Environment #
#######################

# Default environment used by Hatch if no other env is explicitly specified.
[tool.hatch.envs.default]
dependencies = ["typer~=0.13.1"]
installer = "uv"
pip-compile-constraint = "default" # Keep locks between default and other environments consistent.
pip-compile-hashes = true
pip-compile-resolver = "uv"
pip-compile-installer = "uv"
template = "base"
type = "pip-compile"

####################
# Test Environment #
####################

[tool.hatch.envs.test]
# Use `extra-dependencies` to inherit and extend upon the dependencies of the default env.
extra-dependencies = [
  "pytest~=8.3.3",
  "pytest-asyncio~=0.24.0",
  "pytest-cov~=6.0.0",
  "pytest-mock~=3.14.0",
]

[tool.hatch.envs.test.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/python_project --cov=tests {args}"
debug = "pytest --pdb"
no-cov = "cov --no-cov {args}"
test = "pytest -v"
# The `test-cov-xml` command can be used in CI to generate a coverage report in XML format, which is required by
# certain third parties, such as SonarQube code analysis services.
test-cov-xml = "pytest --cov-report=xml"

# By leveraging the Hatch matrix feature we can test against multiple Python versions.
[[tool.hatch.envs.test.matrix]]
template = ["test"]
python = ["3.13"]

####################
# Lint Environment #
####################

[tool.hatch.envs.lint]
extra-dependencies = [
  "mypy~=1.13.0",
  # To enable `mypy` to `pip install` stubs.
  "pip~=24.3.1",
  "pre-commit~=4.0.1",
  "pydantic~=2.10.1",
  "pytest~=8.3.3",
  "ruff~=0.8.0",
]
post-install-commands = ["hatch run lint:pre-commit install"]

[tool.hatch.envs.lint.scripts]
# Check the code style and formatting.
style = [
  "echo \"VERSION: `ruff --version`\"",
  "ruff check {args:.}",
  "ruff format --check {args:.}",
]
# Fix code style and formatting issues where possible.
# Run `style` at the end to generate feedback on non-fixable issues.
fix = ["ruff format {args:.}", "ruff check --fix {args:.}", "style"]
# Perform static type checking.
typing = [
  "echo \"VERSION: `mypy --version`\"",
  "mypy --install-types --non-interactive {args}",
]
# For use as a `pre-commit` hook, define a simpler `typing` script that (1) ignores missing imports
# and (2) does not `--install-types`.
simple-typing = [
  "echo \"VERSION: `mypy --version`\"",
  "mypy --ignore-missing-imports {args}",
]
# Define a `lint` script that runs full-scale style, formatting and type checks ...
lint = ["style", "typing"]
# ... and a simpler `simple-lint` script for use as a pre-commit hook.
simple-lint = ["style", "simple-typing"]
