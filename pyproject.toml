####################
# Project Metadata #
####################

[project]
authors = [{ name = "Firstname Lastname", email = "no-reply@email.com" }]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = []
description = "Python template project using the Hatch project manager."
dynamic = ["version"]
license = { file = "LICENSE" }
name = "python-project"
readme = "README.md"
requires-python = ">=3.12"

[project.urls]
Documentation = "https://github.com/h-holm/python-project"
Source = "https://github.com/h-holm/python-project"

#########
# Hatch #
#########

[tool.hatch]
metadata.allow-direct-references = true

[tool.hatch.version]
path = "src/python_project/__version__.py"
raw-options = { version_scheme = "no-guess-dev" }

##################
# External Tools #
##################

[tool.coverage.run]
branch = true
relative_files = true
source = ["src/python_project"]
omit = ["src/python_project/__version__.py", "tests/*"]

[tool.coverage.paths]
source = ["src/python_project"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if __name__ == .__main__.:"]
skip_empty = true

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
files = ["src/python_project", "tests"]
# Set to "silent" to not follow.
follow_imports = "normal"
no_implicit_optional = true
plugins = ["pydantic.mypy"]
pretty = true
show_column_numbers = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "--cov=src/python_project --cov-report=term-missing --doctest-glob='*.md'"
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
minversion = "8.3.3"
pythonpath = ["src/python_project"]
testpaths = ["tests"]

[tool.ruff]
include = ["src/**/*.py", "src/**/*.pyi", "tests/**/*.py", "tests/**/*.pyi"]
exclude = ["src/python_project/__version__.py"]
indent-width = 4
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "E203",   # Whitespace before ":". Needed for `ruff format`.
  "ISC001", # Causes unexpected behaviour with formatter.
  "G004",   # To allow logging statements to use f-strings.
  "D203",   # If enabled, this requires one blank line before Class docstrings. Conflicts with D211.
  "D213",   # Conflicts with D212.
  "COM812", # "May cause conflicts when used with the formatter".
]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["python_project"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*" = [
  # Tests can use magic values, assertions, and relative imports.
  "PLR2004",
  "S101",
  "TID252",
  # Tests can skip docstrings.
  "D100",
  "D103",
  # Allow boolean-typed positional arguments in test function definitions.
  "FBT001",
]

#######################
# Default Environment #
#######################

[tool.hatch.env]
requires = ["hatch-pip-compile~=1.11.3"]

# Default environment with production dependencies.
[tool.hatch.envs.default]
dependencies = ["typer~=0.12.5"]
installer = "uv"
pip-compile-constraint = "default" # Keep locks between default and other environments consistent.
pip-compile-hashes = true
pip-compile-resolver = "uv"
pip-compile-installer = "uv"
type = "pip-compile"

[tool.hatch.envs.default.scripts]
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE_PACKAGE='{args}' hatch env run --env {env_name} -- python --version"

####################
# Test Environment #
####################

[tool.hatch.envs.test]
# Use `extra-dependencies` to inherit and extend upon the dependencies of the default env.
extra-dependencies = [
  "pytest~=8.3.3",
  "pytest-asyncio~=0.24.0",
  "pytest-cov~=5.0.0",
  "pytest-mock~=3.13.0",
]

[tool.hatch.envs.test.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/python_project --cov=tests {args}"
debug = "cov --no-cov -s --pdb --pdbcls=IPython.core.debugger:Pdb {args}"
no-cov = "cov --no-cov {args}"
test = "pytest -v"
# The `test-cov-xml` command can be used in CI to generate a coverage report in XML format, which is required by
# certain third parties, such as the SonarQube code analysis services.
test-cov-xml = "pytest --cov-report=xml"

# By leveraging the Hatch matrix feature we can test against multiple Python versions.
[[tool.hatch.envs.test.matrix]]
template = ["test"]
python = ["3.12"]

####################
# Lint Environment #
####################

[tool.hatch.envs.lint]
# Inherit from the `test` env (and thus also the `default` env) to enable rigorous type checks and linting of both the
# application logic and the unit tests.
template = "test"
dependencies = [
  "mypy~=1.11.2",
  "pre-commit~=3.8.0",
  "pydantic~=2.9.2",
  "ruff~=0.6.7",
]
post-install-commands = ["pre-commit install"]

[tool.hatch.envs.lint.scripts]
style = [
  "echo \"VERSION: `ruff --version`\"",
  "ruff check {args:.}",
  "ruff format --check {args:.}",
]
# Run `style` at the end to generate feedback on non-fixable issues.
fix = ["ruff format {args:.}", "ruff check --fix {args:.}", "style"]
typing = [
  "echo \"VERSION: `mypy --version`\"",
  "mypy --install-types --non-interactive {args}",
]
all = ["style", "typing"]
